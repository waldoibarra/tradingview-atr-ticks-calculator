// This Pine Script® code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © waldoibarra

//@version=6
indicator("ATR In Ticks", shorttitle = "ATR Ticks")

// ————— Constants
const bool DEFAULT_DISPLAY_IN_TICKS = true

const int DEFAULT_BARS_LENGTH = 14

const float DEFAULT_ATR_MULTIPLIER  = 1.0

const color RED = #b71c1c

const string MAT_RMA = "RMA"
const string MAT_SMA = "SMA"
const string MAT_EMA = "EMA"
const string MAT_WMA = "WMA"
const string MAT_DEFAULT = MAT_RMA

const string CALCULATION_GROUP_NAME = "CALCULATION"

const string TT_MTF = "Multi-timeframe analysis (MTF); view the same indicator on a higher timeframe than the chart's to see the price action within a broader, long-term perspective."

// ————— Inputs
int barsLength = input.int(DEFAULT_BARS_LENGTH, title = "Length (Bars/Periods)", minval = 1)
string movingAverateType = input.string(MAT_DEFAULT,
  title = "Smoothing",
  options = [MAT_RMA, MAT_SMA, MAT_EMA, MAT_WMA])
float atrMultiplier = input.float(DEFAULT_ATR_MULTIPLIER, title = "Multiplier", minval = 0.1, step = 0.1)
bool shouldDisplayInTicks = input.bool(DEFAULT_DISPLAY_IN_TICKS, title = "Display in ticks (instead of points)")
string timeframe = input.timeframe("", "Timeframe", group = CALCULATION_GROUP_NAME, tooltip = TT_MTF)
bool shouldWaitForCloses = input.bool(true, "Wait for timeframe closes", group = CALCULATION_GROUP_NAME)

// ————— Functions
// @function                    Computes the selected moving average smoothed value.
// @param movingAverateLength   The lookback period (length) for the smoothing calculation.
// @param movingAverateType     The desired moving average type (e.g., "RMA", "EMA").
// @returns                     The smoothed price value (a series).
calculateAverageTrueRange(int movingAverateLength, string movingAverateType) =>
    float trueRange = ta.tr(true)

    // Calculate all four series once outside the switch block for consistency and stability.
    float rma = ta.rma(trueRange, movingAverateLength)
    float sma = ta.sma(trueRange, movingAverateLength)
    float ema = ta.ema(trueRange, movingAverateLength)
    float wma = ta.wma(trueRange, movingAverateLength)

    float movingAverage = switch movingAverateType
        MAT_RMA => rma
        MAT_SMA => sma
        MAT_EMA => ema
        MAT_WMA => wma
        =>
            runtime.error("No matching moving average type found.")
            float(na)

    movingAverage

// ————— Calculations
string tickerId = ticker.new(syminfo.prefix, syminfo.ticker, syminfo.session)
float atrInPoints = timeframe == ""
  ? calculateAverageTrueRange(barsLength, movingAverateType)
  : request.security(
      tickerId,
      timeframe,
      calculateAverageTrueRange(barsLength, movingAverateType),
      gaps = shouldWaitForCloses ? barmerge.gaps_on : barmerge.gaps_off)
float atrInTicks = math.round_to_mintick(atrInPoints / syminfo.mintick)
float multipliedAtr = shouldDisplayInTicks ? math.ceil(atrInTicks * atrMultiplier) : atrInPoints * atrMultiplier

// ————— Visuals
plot(multipliedAtr, title = "ATR Value", color = RED)
